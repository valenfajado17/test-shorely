{"version":3,"file":"custom-state-set.js","sourceRoot":"","sources":["custom-state-set.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAIH,OAAO,EAAC,SAAS,EAAuB,MAAM,wBAAwB,CAAC;AAGvE;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;AAE3C;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;AA8BjD,kBAAkB;AAClB,MAAM,0BAA0B,GAAG,MAAM,CAAC,4BAA4B,CAAC,CAAC;AACxE,MAAM,yBAAyB,GAAG,MAAM,CAAC,2BAA2B,CAAC,CAAC;AAEtE;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AACH,MAAM,UAAU,mBAAmB,CAEjC,IAAO;;IACP,MAAe,yBACb,SAAQ,IAAI;QADd;;YAkBE,QAA4B,GAAmB,IAAI,CAAC;QAkBtD,CAAC;QAhCC,CAAC,QAAQ,CAAC,CAAC,KAAa;YACtB,KAAK,GAAG,IAAI,CAAC,yBAAyB,CAAC,CAAC,KAAK,CAAC,CAAC;YAC/C,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC3C,CAAC;QAED,CAAC,WAAW,CAAC,CAAC,KAAa,EAAE,QAAiB;YAC5C,KAAK,GAAG,IAAI,CAAC,yBAAyB,CAAC,CAAC,KAAK,CAAC,CAAC;YAC/C,IAAI,QAAQ,EAAE,CAAC;gBACb,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACpC,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC;QACH,CAAC;QAID,OAFC,0BAA0B,EAE1B,yBAAyB,EAAC,CAAC,KAAa;YACvC,IAAI,IAAI,CAAC,0BAA0B,CAAC,KAAK,IAAI,EAAE,CAAC;gBAC9C,kDAAkD;gBAClD,yGAAyG;gBACzG,IAAI,CAAC;oBACH,MAAM,SAAS,GAAG,OAAO,CAAC;oBAC1B,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;oBACtC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;oBACzC,IAAI,CAAC,0BAA0B,CAAC,GAAG,KAAK,CAAC;gBAC3C,CAAC;gBAAC,MAAM,CAAC;oBACP,IAAI,CAAC,0BAA0B,CAAC,GAAG,IAAI,CAAC;gBAC1C,CAAC;YACH,CAAC;YAED,OAAO,IAAI,CAAC,0BAA0B,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;QACjE,CAAC;KACF;IAED,OAAO,yBAAyB,CAAC;AACnC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {LitElement} from 'lit';\n\nimport {internals, WithElementInternals} from './element-internals.js';\nimport {MixinBase, MixinReturn} from './mixin.js';\n\n/**\n * A unique symbol used to check if an element's `CustomStateSet` has a state.\n *\n * Provides compatibility with legacy dashed identifier syntax (`:--state`) used\n * by the element-internals-polyfill for Chrome extension support.\n *\n * @example\n * ```ts\n * const baseClass = mixinCustomStateSet(mixinElementInternals(LitElement));\n *\n * class MyElement extends baseClass {\n *   get checked() {\n *     return this[hasState]('checked');\n *   }\n *   set checked(value: boolean) {\n *     this[toggleState]('checked', value);\n *   }\n * }\n * ```\n */\nexport const hasState = Symbol('hasState');\n\n/**\n * A unique symbol used to add or delete a state from an element's\n * `CustomStateSet`.\n *\n * Provides compatibility with legacy dashed identifier syntax (`:--state`) used\n * by the element-internals-polyfill for Chrome extension support.\n *\n * @example\n * ```ts\n * const baseClass = mixinCustomStateSet(mixinElementInternals(LitElement));\n *\n * class MyElement extends baseClass {\n *   get checked() {\n *     return this[hasState]('checked');\n *   }\n *   set checked(value: boolean) {\n *     this[toggleState]('checked', value);\n *   }\n * }\n * ```\n */\nexport const toggleState = Symbol('toggleState');\n\n/**\n * An instance with `[hasState]()` and `[toggleState]()` symbol functions that\n * provide compatibility with `CustomStateSet` legacy dashed identifier syntax,\n * used by the element-internals-polyfill and needed for Chrome extension\n * compatibility.\n */\nexport interface WithCustomStateSet {\n  /**\n   * Checks if the state is active, returning true if the element matches\n   * `:state(customstate)`.\n   *\n   * @param customState the `CustomStateSet` state to check. Do not use the\n   *     `--customstate` dashed identifier syntax.\n   * @return true if the custom state is active, or false if not.\n   */\n  [hasState](customState: string): boolean;\n\n  /**\n   * Toggles the state to be active or inactive based on the provided value.\n   * When active, the element matches `:state(customstate)`.\n   *\n   * @param customState the `CustomStateSet` state to check. Do not use the\n   *     `--customstate` dashed identifier syntax.\n   * @param isActive true to add the state, or false to delete it.\n   */\n  [toggleState](customState: string, isActive: boolean): void;\n}\n\n// Private symbols\nconst privateUseDashedIdentifier = Symbol('privateUseDashedIdentifier');\nconst privateGetStateIdentifier = Symbol('privateGetStateIdentifier');\n\n/**\n * Mixes in compatibility functions for access to an element's `CustomStateSet`.\n *\n * Use this mixin's `[hasState]()` and `[toggleState]()` symbol functions for\n * compatibility with `CustomStateSet` legacy dashed identifier syntax.\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/CustomStateSet#compatibility_with_dashed-ident_syntax.\n *\n * The dashed identifier syntax is needed for element-internals-polyfill, a\n * requirement for Chome extension compatibility.\n *\n * @example\n * ```ts\n * const baseClass = mixinCustomStateSet(mixinElementInternals(LitElement));\n *\n * class MyElement extends baseClass {\n *   get checked() {\n *     return this[hasState]('checked');\n *   }\n *   set checked(value: boolean) {\n *     this[toggleState]('checked', value);\n *   }\n * }\n * ```\n *\n * @param base The class to mix functionality into.\n * @return The provided class with `[hasState]()` and `[toggleState]()`\n *     functions mixed in.\n */\nexport function mixinCustomStateSet<\n  T extends MixinBase<LitElement & WithElementInternals>,\n>(base: T): MixinReturn<T, WithCustomStateSet> {\n  abstract class WithCustomStateSetElement\n    extends base\n    implements WithCustomStateSet\n  {\n    [hasState](state: string) {\n      state = this[privateGetStateIdentifier](state);\n      return this[internals].states.has(state);\n    }\n\n    [toggleState](state: string, isActive: boolean) {\n      state = this[privateGetStateIdentifier](state);\n      if (isActive) {\n        this[internals].states.add(state);\n      } else {\n        this[internals].states.delete(state);\n      }\n    }\n\n    [privateUseDashedIdentifier]: boolean | null = null;\n\n    [privateGetStateIdentifier](state: string) {\n      if (this[privateUseDashedIdentifier] === null) {\n        // Check if `--state-string` needs to be used. See\n        // https://developer.mozilla.org/en-US/docs/Web/API/CustomStateSet#compatibility_with_dashed-ident_syntax\n        try {\n          const testState = '_test';\n          this[internals].states.add(testState);\n          this[internals].states.delete(testState);\n          this[privateUseDashedIdentifier] = false;\n        } catch {\n          this[privateUseDashedIdentifier] = true;\n        }\n      }\n\n      return this[privateUseDashedIdentifier] ? `--${state}` : state;\n    }\n  }\n\n  return WithCustomStateSetElement;\n}\n"]}